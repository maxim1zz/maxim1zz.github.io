import {
  __commonJS
} from "./chunk-LQ2VYIYD.js";

// node_modules/get-mp3-duration/index.js
var require_get_mp3_duration = __commonJS({
  "node_modules/get-mp3-duration/index.js"(exports, module) {
    var versions = ["2.5", "x", "2", "1"];
    var layers = ["x", "3", "2", "1"];
    var bitRates = {
      "V1Lx": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      "V1L1": [0, 32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448],
      "V1L2": [0, 32, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 384],
      "V1L3": [0, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320],
      "V2Lx": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      "V2L1": [0, 32, 48, 56, 64, 80, 96, 112, 128, 144, 160, 176, 192, 224, 256],
      "V2L2": [0, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160],
      "V2L3": [0, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160],
      "VxLx": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      "VxL1": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      "VxL2": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      "VxL3": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    };
    var sampleRates = {
      "x": [0, 0, 0],
      "1": [44100, 48e3, 32e3],
      "2": [22050, 24e3, 16e3],
      "2.5": [11025, 12e3, 8e3]
    };
    var samples = {
      x: {
        x: 0,
        1: 0,
        2: 0,
        3: 0
      },
      1: {
        // MPEGv1,    Layers 1, 2, 3
        x: 0,
        1: 384,
        2: 1152,
        3: 1152
      },
      2: {
        // MPEGv2/2.5, Layers 1, 2, 3
        x: 0,
        1: 384,
        2: 1152,
        3: 576
      }
    };
    module.exports = (buffer) => {
      const scratch = Buffer.alloc(100);
      const bytesRead = buffer.copy(scratch, 0, 0, 100);
      if (bytesRead < 100)
        return 0;
      let offset = skipID3(scratch);
      let duration = 0;
      while (offset < buffer.length) {
        const bytesRead2 = buffer.copy(scratch, 0, offset, offset + 10);
        if (bytesRead2 < 10)
          return round(duration);
        if (scratch[0] === 255 && (scratch[1] & 224) === 224) {
          const header = parseFrameHeader(scratch);
          if (header.frameSize && header.samples) {
            offset += header.frameSize;
            duration += header.samples / header.sampleRate;
          } else {
            offset++;
          }
        } else if (scratch[0] === 84 && scratch[1] === 65 && scratch[2] === 71) {
          offset += 128;
        } else {
          offset++;
        }
      }
      return round(duration);
    };
    function skipID3(buffer) {
      if (buffer[0] === 73 && buffer[1] === 68 && buffer[2] === 51) {
        const id3v2Flags = buffer[5];
        const footerSize = id3v2Flags & 16 ? 10 : 0;
        const z0 = buffer[6];
        const z1 = buffer[7];
        const z2 = buffer[8];
        const z3 = buffer[9];
        if ((z0 & 128) === 0 && (z1 & 128) === 0 && (z2 & 128) === 0 && (z3 & 128) === 0) {
          const tagSize = (z0 & 127) * 2097152 + (z1 & 127) * 16384 + (z2 & 127) * 128 + (z3 & 127);
          return 10 + tagSize + footerSize;
        }
      }
      return 0;
    }
    function frameSize(samples2, layer, bitRate, sampleRate, paddingBit) {
      if (layer === 1) {
        return samples2 * bitRate * 125 / sampleRate + paddingBit * 4 | 0;
      } else {
        return samples2 * bitRate * 125 / sampleRate + paddingBit | 0;
      }
    }
    function parseFrameHeader(header) {
      const b1 = header[1];
      const b2 = header[2];
      const versionBits = (b1 & 24) >> 3;
      const version = versions[versionBits];
      const simpleVersion = version === "2.5" ? 2 : version;
      const layerBits = (b1 & 6) >> 1;
      const layer = layers[layerBits];
      const bitRateKey = "V" + simpleVersion + "L" + layer;
      const bitRateIndex = (b2 & 240) >> 4;
      const bitRate = bitRates[bitRateKey][bitRateIndex] || 0;
      const sampleRateIdx = (b2 & 12) >> 2;
      const sampleRate = sampleRates[version][sampleRateIdx] || 0;
      const sample = samples[simpleVersion][layer];
      const paddingBit = (b2 & 2) >> 1;
      return {
        bitRate,
        sampleRate,
        frameSize: frameSize(sample, layer, bitRate, sampleRate, paddingBit),
        samples: sample
      };
    }
    function round(duration) {
      return Math.round(duration * 1e3);
    }
  }
});
export default require_get_mp3_duration();
//# sourceMappingURL=get-mp3-duration.js.map
